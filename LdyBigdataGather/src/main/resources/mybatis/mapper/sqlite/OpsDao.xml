<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ldy.bigdata.gather.mapper.sqlite.OpsDao">

    <select id="gatherTables" resultType="ldy.bigdata.gather.entities.KeyValue">
        select mysqlDataBase || '.' || tableName as key, mysqlDataBase||'.'||tableName as value
        from DataGatherConfigPE
        where isRealTime = 1
           or isValid = 1
    </select>

    <select id="getMysqlColumnInfo" resultType="ldy.bigdata.gather.entities.ColumnInfo">
        select mysqlTableName, columnName, type, position
        from mysqlColumnType
        where mysqlTableName = #{mysqlTableName, jdbcType=VARCHAR}
        order by mysqlTableName, position
    </select>

    <select id="gatherBatch" resultType="ldy.bigdata.gather.entities.KeyValue">
        select
        case when analyseStatus='ERROR' then analyseStatus else gatherStatus end  as key,
        gatherBatchID as value
        from DataGatherBatch
        <where>
            <if test="status != null and status != ''">
                and gatherStatus = #{status, jdbcType=VARCHAR} or analyseStatus = #{status, jdbcType=VARCHAR}
            </if>
        </where>
        order by gatherBatchID
    </select>

    <select id="gatherBatchInfo" resultType="ldy.bigdata.gather.entities.BatchInfo">
        select gatherBatchID,
               gatherStatus,
               analyseStatus,
               impalaToMysqlStaus       impalaToMysqlStatus,
               analyseStatusUpdate_Time analyseStatusUpdateTime,
               create_time              createTime,
               update_time              updateTime
        from DataGatherBatch
        where gatherBatchID = #{batch, jdbcType=BIGINT}
        order by gatherBatchID
    </select>

    <select id="gatherInfo" resultType="ldy.bigdata.gather.entities.GatherInfo">
        select task_id     taskId,
               startGather,
               endGather,
               batchId,
               taskStatus,
               runStart,
               runEnd,
               update_time updateTime,
               description,
               selectCnt,
               insertCnt
        from DataGatherTask
        where batchId = #{batch, jdbcType=BIGINT}
        order by task_id
    </select>

    <select id="getAnalyseBatch" resultType="ldy.bigdata.gather.entities.KeyValue">
        select
        distinct
        BatchId as key,
        BatchId as value
        from AnalyseTask
        <where>
            <if test="status != null and status != ''">
                and taskStatus = #{status, jdbcType=VARCHAR}
            </if>
        </where>
        order by runStart
    </select>

    <select id="getAnalyseTaskInfo" resultType="ldy.bigdata.gather.entities.AnalyseTaskInfo">
        select
        taskId,
        batchId,
        taskName,
        taskStatus,
        scriptStartTime,
        scriptEndTime,
        runStart,
        runEnd,
        gatherBatchId,
        retryCnt
        from AnalyseTask
        <where>
            <if test="status != null and status != ''">
                and BatchId = #{status, jdbcType=VARCHAR}
            </if>
        </where>
        order by taskId
    </select>

    <delete id="delHistoryGatherTask">
        delete
        from DataGatherTask
        where batchId &lt; #{batch, jdbcType=BIGINT}
    </delete>
    <delete id="delGatherBatch">
        delete
        from DataGatherBatch
        where gatherBatchID &lt; #{batch, jdbcType=BIGINT}
    </delete>
    <select id="getAnalyseBatchTime" resultType="java.lang.String">
        select max(runStart) runStart
        from AnalyseTask
        where BatchId = #{batch, jdbcType=VARCHAR}
    </select>
    <delete id="delAnalyseTask">
        delete from AnalyseTask where runstart &lt; #{time, jdbcType=VARCHAR}
    </delete>
    <select id="getBackstageService" resultType="ldy.bigdata.gather.entities.ServiceInfo">
        select
            serviceName        as backstageServiceName,
            serviceStartScript as backstageServiceStartScript,
            null               as backstageServiceStatus
        from BackstageService
        order by serviceName
    </select>
</mapper>
